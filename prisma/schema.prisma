// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  title        String
  author       String
  description  String
  isbn         String
  image        String
  epub         String
  color        String    @default("#fff")
  pages        Int
  likedPercent Int
  popularity   Int       @default(0)
  mainGenreId  Int
  majorGenre   Genre     @relation("BookMajorGenre", fields: [mainGenreId], references: [id])
  histories    History[]
  genres       Genre[]   @relation("BookGenre")
  reviews      Review[]
  shelves      Shelves[]
  likedBy      User[]    @relation("LikedBooks")
  finishBy     User[]    @relation("FinishBooks")
  readingBy    User[]    @relation("ReadingBooks")
}

model Genre {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String   @unique
  users      User[]
  books      Book[]   @relation("BookGenre")
  majorBooks Book[]   @relation("BookMajorGenre")
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dislike   Int      @default(0)
  like      Int      @default(0)
  bookId    Int
  userId    Int
  text      String
  book      Book     @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  emotion   String[]
}

model History {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  time      Int
  book      Book     @relation(fields: [bookId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  bookId    Int
}

model User {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String    @unique
  name          String?
  picture       String?
  password      String
  isAdmin       Boolean   @default(false)
  history       History[]
  review        Review[]
  inititalGenre Genre[]
  likedBooks    Book[]    @relation("LikedBooks")
  finishBooks   Book[]    @relation("FinishBooks")
  readingBooks  Book[]    @relation("ReadingBooks")
  likeShelves   Shelves[] @relation("LikedShelves")
  unWacthed     Shelves[] @relation("UnWacthedShelves")
}

model Shelves {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  like      User[]   @relation("LikedShelves")
  unWacthed User[]   @relation("UnWacthedShelves")
  color     String   @default("#fff")
  books     Book[]
}
