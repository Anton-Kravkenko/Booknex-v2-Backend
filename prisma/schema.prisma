// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Genre {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  name       String   @unique
  color      String   @default("#fff")
  users      User[]
  books      Book[]   @relation("BookGenre")
  majorBooks Book[]   @relation("BookMajorGenre")
  similarBy  Genre[]  @relation("Similar")
  similar    Genre[]  @relation("Similar")
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookId    Int
  userId    Int
  emotionId Int
  text      String
  tags      String[]
  emotion   Emotion? @relation(fields: [emotionId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Emotion {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  path      String
  Review    Review[]
}

model History {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  time      Int // Duration in milliseconds
  book      Book     @relation(fields: [bookId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  bookId    Int
}

model Book {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  title           String
  author          String
  description     String
  isbn            String
  image           String
  epub            String
  color           String    @default("#fff")
  pages           Int
  likedPercentage Int
  popularity      Int       @default(0)
  mainGenreId     Int
  majorGenre      Genre     @relation("BookMajorGenre", fields: [mainGenreId], references: [id])
  histories       History[]
  genres          Genre[]   @relation("BookGenre")
  reviews         Review[]
  shelves         Shelf[]
  likedBy         User[]    @relation("LikedBooks")
  finishedBy      User[]    @relation("FinishedBooks")
  readingBy       User[]    @relation("ReadingBooks")
}

model User {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  email            String    @unique
  name             String?
  picture          String?
  password         String
  isAdmin          Boolean   @default(false)
  history          History[]
  review           Review[]
  initialGenre     Genre[]
  likedBooks       Book[]    @relation("LikedBooks")
  finishedBooks    Book[]    @relation("FinishedBooks")
  readingBooks     Book[]    @relation("ReadingBooks")
  watchedShelves   Shelf[]   @relation("WatchedShelves")
  unwatchedShelves Shelf[]   @relation("UnwatchedShelves")
}

model Shelf {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String   @unique
  description String?  @default("")
  image       String   @default("")
  icon        String   @default("")
  watched     User[]   @relation("WatchedShelves")
  unwatched   User[]   @relation("UnwatchedShelves")
  color       String   @default("#fff")
  books       Book[]
}
