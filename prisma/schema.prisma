// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  email        String      @unique
  name         String?
  password     String
  role         String      @default("USER")
  bookMarks    Int
  quotes       Quotation[]
  history      History[]
  likedBooks   Book[]      @relation("LikedBooks")
  readBooks    Book[]      @relation("ReadBooks")
  readingBooks Book[]      @relation("ReadingBooks")
  message      Message[]
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  from      String
  text      String
  users     User[]
}

model Book {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  title        String
  author       String
  description  String
  isbn         String
  pages        Int
  image        String
  epub         String
  likedPercent Int
  genre        Genre[]
  quotations   Quotation[]
  likedBy      User[]      @relation("LikedBooks")
  readBy       User[]      @relation("ReadBooks")
  readingBy    User[]      @relation("ReadingBooks")
  history      History[]
}

model Quotation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  emoji     String
  book      Book?    @relation(fields: [bookId], references: [id])
  bookId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model Genre {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  books     Book[]
}

model History {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Book      Book?    @relation(fields: [bookId], references: [id])
  bookId    Int?
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}
